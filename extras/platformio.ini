; Другие варианты и примеры смотрите в документации
; https://docs.platformio.org/page/projectconf.html
;
; =====================< ИНФОРМАЦИЯ О ПРОЕКТЕ >=================================
[platformio]
description = Тестирование библиотеки DebugLogger
default_envs = uno_release

; =================< ОБЩАЯ НАСТРОЙКА ВСЕХ КОНФИГУРАЦИЙ >========================
[env]
platform = atmelavr
framework = arduino
check_skip_packages = yes
monitor_filters = colorize
monitor_speed = 115200 ; (по умолчанию) скорость порта для консоли
lib_ldf_mode = chain+  ; Тоже что и по умолчанию, но анализирует условный синтаксис препроцессора C/C++

; ========================< ОБЩИЙ СПИСОК БИБЛИОТЕК >============================
[libraries]
;wire = Wire
;spi = SPI
debuglogger = https://github.com/ThinkerSan/DebugLogger

; =====================< ОБЩАЯ НАСТРОЙКА КОМПИЛЯТОРА >==========================
[common]
lib_deps = ; добавить сюда необходимые библиотеки используемые ДЛЯ ВСЕХ конфигураций
  ;${libraries.wire}
	;${libraries.spi}
	${libraries.debuglogger}
build_flags =        ; Флаги компиляции
	-Wall              ; Включить все предупреждения.
	-Wextra            ; Включить необязательные предупреждения.
	-Wshadow           ; Предупреждает, если имя объявленной переменной перекрывает такое же имя на более высоком уровне
	-Wfloat-equal      ; Предупреждает, если два числа с плавающей точкой сравниваются так: a == b.
	-Wlogical-op       ; Предупреждать о подозрительном использовании логических операторов там, где GCC ожидает побитовые операторы

; ==================< НАСТРОЙКА КОМПИЛЯТОРА ДЛЯ ОТЛАДКИ >=======================
[env_debug]
build_flags =        ; Флаги компиляции для отладки.
	${common.build_flags}
	-DDEBUG            ; Включить отладку
	-save-temps=obj    ; Сохранять файлы ассемблера (.s, .i и .ii) в каталоге сборки (.pio\build\...) для дизассемблирования и отладки
	-fverbose-asm      ; Добавить дополнительную информацию в виде комментариев в сгенерированный ассемблерный код
build_unflags =
	-flto    ; Убирает флаг -flto, для сохранения ассемблерного файла в читаемом виде.
debug_build_flags =  ; Установка уровня оптимизации и количества отладочной информации, генерируемой компилятором
	-Og      ; Уровень оптимизации для отладки
	-ggdb3   ; Выдает отладочную информацию, специально предназначенную для GDB с уровнем 3 (для получения дополнительной информации об отладке)
	-g3      ; Уровень отладочной информации максимальный
	-Wa,-g   ; Отладка для ассемблера

; ================< НАСТРОЙКА ДЛЯ КОМПИЛЯЦИИ РЕЛИЗА >=====================
[env:uno_release]
board = uno
build_type = release
build_flags = ${common.build_flags}
lib_deps =
	${common.lib_deps}

; ==============< НАСТРОЙКА ДЛЯ КОМПИЛЯЦИИ С ОТЛАДКОЙ >===================
[env:uno_debug]
board = uno
build_type = debug
extends = env_debug
lib_deps =
	${common.lib_deps}

; Шаблон конфигурации для: MiniCore https://github.com/MCUdude/MiniCore/blob/master/PlatformIO.md
;
; ================< НАСТРОЙКА ДЛЯ КОМПИЛЯЦИИ РЕЛИЗА >=====================
[env:ATmega328P_release]
board = ATmega328P
build_type = release
board_build.f_cpu = 16000000L ; (по умолчанию) Частота MCU [Hz]
upload_protocol = arduino ; Протокол загрузчика (bootloader)
build_flags = ${common.build_flags}
lib_deps =
		${common.lib_deps}

; ==============< НАСТРОЙКА ДЛЯ КОМПИЛЯЦИИ С ОТЛАДКОЙ >===================
[env:ATmega328P_debug]
board = ATmega328P
build_type = debug
board_build.f_cpu = 16000000L ; (по умолчанию) Частота MCU [Hz]
upload_protocol = urclock ; Протокол загрузчика (bootloader)
extends = env_debug
lib_deps =
		${common.lib_deps}

; =========< НАСТРОЙКА ДЛЯ ЗАПИСИ ЗАГРУЗЧИКА ИЛИ КОНФИГУРАЦИИ ФЬЮЗОВ >=========
; Выполните следующую команду, чтобы установить фьюзы:
; pio run -e fuses_bootloader -t fuses
; Выполните следующую команду, чтобы установить фьюзы + записать загрузчик:
; pio run -e fuses_bootloader -t bootloader (для записи загрузчика лучше использовать комманду в меню PlatformIO)
[env:fuses_bootloader]
board = ATmega328P
board_build.f_cpu = 16000000         ; Частота MCU [Hz]
board_hardware.oscillator = external ; (по умолчанию) тип тактового генератора внешний)
board_bootloader.type = urboot       ; (по умолчанию) загрузчик urboot, optiboot или no_bootloader
board_bootloader.speed = 115200      ; скорость передачи данных загрузчика
board_hardware.uart = uart0          ; (по умолчанию) UART для использования загрузки
board_hardware.bod = 2.7v            ; Настроить brown-out detection
board_hardware.jtagen =no            ; (по умолчанию) выключить порт JTAG
board_hardware.eesave = yes          ; сохранять EEPROM при загрузке с помощью программатора
upload_protocol = usbasp             ; использовать USBasp в качестве программатора
upload_flags =                       ; Выберите USB в качестве порта загрузки и разделите частоту SPI на 8
	-PUSB
	-B8

; =================< НАСТРОЙКА ДЛЯ ЗАПИСИ ЧЕРЕЗ ПРОГРАММАТОР >=================
[env:Upload_ISP]
board = ATmega328P
board_build.f_cpu = 16000000 ; Частота MCU [Hz]
; Пользовательская процедура загрузки через SPI разъём (с помощью программатора).
; В основном используется если нет загрузчика или на платах, отличных от Arduino.
upload_protocol = custom
; Флаги, используемые Avrdude для загрузки
upload_flags =
	-C$PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
	-p$BOARD_MCU
	-PUSB
	-cusbasp
; Команды, используемые Avrdude для загрузки
upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i
